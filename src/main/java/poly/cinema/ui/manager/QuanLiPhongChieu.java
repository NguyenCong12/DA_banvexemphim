/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package poly.cinema.ui.manager;

import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import poly.cinema.dao.QuanLyGheDao;
import poly.cinema.dao.QuanLyPhongChieuDao;
import poly.cinema.dao.impl.QuanLyGheDaoImpl;
import poly.cinema.dao.impl.QuanLyPhongChieuDaoImpl;
import poly.cinema.entity.PhongChieu;
import poly.cinema.entity.QuanLyGhe;
import poly.cinema.util.XDialog;

/**
 *
 * @author BA HAO
 */
public class QuanLiPhongChieu extends javax.swing.JPanel implements QuanLyPhongChieuController {

    /**
     * Creates new form QuanLiPhongChieu
     */
    public QuanLiPhongChieu() {
        initComponents();
        open();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPhongChieu = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMaPhong = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtSoCot = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtSoHang = new javax.swing.JTextField();
        txtTenPhong = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1110, 720));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1110, 720));

        tblPhongChieu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã phòng", "Tên phòng", "Số hàng", "Số cột"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPhongChieu.setGridColor(new java.awt.Color(0, 0, 0));
        tblPhongChieu.setRowHeight(25);
        tblPhongChieu.setShowGrid(true);
        tblPhongChieu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPhongChieuMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPhongChieu);

        jPanel2.setBackground(new java.awt.Color(212, 212, 212));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Mã phòng:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Tên phòng:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Số cột:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Số hàng:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtMaPhong, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(txtTenPhong))
                .addGap(169, 169, 169)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txtSoCot, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSoHang, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMaPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSoHang, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSoCot, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTenPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jLabel3.setText("QUẢN LÝ PHÒNG CHIẾU");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jLabel6.setText("QUẢN LÝ PHÒNG CHIẾU");

        btnThem.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnXoa.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnMoi.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnMoi.setText("Nhập mới");
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(387, 387, 387)
                        .addComponent(jLabel6)
                        .addGap(1563, 1563, 1563)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(608, 608, 608)
                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btnMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel3)
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)
                        .addGap(37, 37, 37)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        clear();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void tblPhongChieuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPhongChieuMouseClicked
        int row = tblPhongChieu.getSelectedRow();
        if (row >= 0) {
            PhongChieu phongChieu = items.get(row);
            setForm(phongChieu);
        }
        updateButtonStatus();
    }//GEN-LAST:event_tblPhongChieuMouseClicked

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        create();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        update();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        delete();
    }//GEN-LAST:event_btnXoaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPhongChieu;
    private javax.swing.JTextField txtMaPhong;
    private javax.swing.JTextField txtSoCot;
    private javax.swing.JTextField txtSoHang;
    private javax.swing.JTextField txtTenPhong;
    // End of variables declaration//GEN-END:variables

    QuanLyPhongChieuDao dao = new QuanLyPhongChieuDaoImpl();
    List<PhongChieu> items = new ArrayList<>();

    private void updateButtonStatus() {
        boolean isSelected = tblPhongChieu.getSelectedRow() >= 0;
        btnThem.setEnabled(!isSelected); // Chỉ bật khi KHÔNG chọn dòng
        btnSua.setEnabled(isSelected);   // Bật khi có chọn dòng
        btnXoa.setEnabled(isSelected);   // Bật khi có chọn dòng
    }
private void insertGheChoPhong(PhongChieu pc) {
    QuanLyGheDao gheDao = new QuanLyGheDaoImpl();
    int soHang = pc.getSoHang();
    int soCot = pc.getSoCot();
    String maPhong = pc.getMaPhong();

    for (int hang = 1; hang <= soHang; hang++) {
        String hangStr = String.valueOf((char) ('A' + hang - 1)); // A, B, C,...
        
        // Xác định loại ghế
        String loaiGhe = (hang <= 3) ? "Thường" : "VIP";

        for (int cot = 1; cot <= soCot; cot++) {
            String soGhe = hangStr + cot; // Ví dụ: A1, A2, D5, E3,...
            QuanLyGhe ghe = new QuanLyGhe(
                null,
                maPhong,
                soGhe,
                hangStr,
                cot,
                loaiGhe
            );
            gheDao.create(ghe);
        }
    }
}


    @Override
    public PhongChieu getForm() {
        String ma = txtMaPhong.getText().trim();
        String ten = txtTenPhong.getText().trim();
        String soHangStr = txtSoHang.getText().trim();
        String soCotStr = txtSoCot.getText().trim();

        if (ma.isEmpty() || ten.isEmpty() || soHangStr.isEmpty() || soCotStr.isEmpty()) {
            XDialog.alert("Vui lòng nhập đầy đủ thông tin.");
            return null;
        }

        try {
            int soHang = Integer.parseInt(soHangStr);
            int soCot = Integer.parseInt(soCotStr);

            if (soHang <= 0 || soCot <= 0) {
                XDialog.alert("Số hàng và số cột phải > 0");
                return null;
            }

            return new PhongChieu(ma, ten, soHang, soCot);
        } catch (NumberFormatException e) {
            XDialog.alert("Số hàng và số cột phải là số nguyên!");
            return null;
        }
    }

    @Override
    public void setForm(PhongChieu entity) {
        txtMaPhong.setText(entity.getMaPhong());
        txtTenPhong.setText(entity.getTenPhong());
        txtSoHang.setText(String.valueOf(entity.getSoHang()));
        txtSoCot.setText(String.valueOf(entity.getSoCot()));
    }

    @Override
    public void fillToTable() {
        DefaultTableModel model = (DefaultTableModel) tblPhongChieu.getModel();
        model.setRowCount(0);
        items = dao.findAll();
        for (PhongChieu pc : items) {
            model.addRow(new Object[]{
                pc.getMaPhong(),
                pc.getTenPhong(),
                pc.getSoHang(),
                pc.getSoCot()
            });
        }
        updateButtonStatus();
    }

    @Override
public void create() {
    PhongChieu pc = getForm();
    if (pc == null) {
        return;
    }

    for (PhongChieu item : items) {
        if (item.getMaPhong().equalsIgnoreCase(pc.getMaPhong())) {
            XDialog.alert("Mã phòng đã tồn tại, vui lòng chọn mã khác.");
            return;
        }
    }

    dao.create(pc);
    insertGheChoPhong(pc); // ✅ THÊM GHẾ NGAY SAU KHI TẠO PHÒNG

    fillToTable();
    clear();
    updateButtonStatus();
    XDialog.alert("Thêm thành công!");
}


    @Override
public void update() {
    int row = tblPhongChieu.getSelectedRow();
    if (row < 0) {
        XDialog.alert("Vui lòng chọn phòng để cập nhật.");
        return;
    }

    PhongChieu pc = getForm();
    if (pc == null) {
        return;
    }

    // Lấy bản gốc từ list để so sánh
    PhongChieu old = items.get(row);
    boolean isChanged = !old.getMaPhong().equals(pc.getMaPhong())
                     || !old.getTenPhong().equals(pc.getTenPhong())
                     || old.getSoHang() != pc.getSoHang()
                     || old.getSoCot() != pc.getSoCot();

    if (!isChanged) {
        XDialog.alert("Bạn chưa thay đổi thông tin nào để cập nhật.");
        return;
    }

    dao.update(pc); // Cập nhật phòng

    // Nếu số hàng/cột thay đổi thì làm lại ghế
    if (old.getSoHang() != pc.getSoHang() || old.getSoCot() != pc.getSoCot()) {
        QuanLyGheDao gheDao = new QuanLyGheDaoImpl();
        gheDao.deleteByMaPhong(pc.getMaPhong()); // ✅ Xóa ghế cũ
        insertGheChoPhong(pc);                   // ✅ Sinh lại ghế mới
    }

    fillToTable();
    XDialog.alert("Cập nhật thành công!");
}


    @Override
public void delete() {
    int row = tblPhongChieu.getSelectedRow();
    if (row < 0) {
        XDialog.alert("Vui lòng chọn phòng cần xóa.");
        return;
    }

    String maPhong = (String) tblPhongChieu.getValueAt(row, 0);

    // Xác nhận trước khi xóa
    if (!XDialog.confirm("Bạn có chắc muốn xóa phòng này không?")) {
        return;
    }

    try {
        // Bước 1: Xóa ghế trước
        QuanLyGheDao gheDao = new QuanLyGheDaoImpl();
        gheDao.deleteByMaPhong(maPhong);

        // Bước 2: Xóa phòng chiếu
        dao.delete(maPhong); // delete theo mã phòng, phải có hàm này trong QuanLyPhongChieuDao

        fillToTable();
        clear();
        XDialog.alert("Xóa thành công!");
    } catch (Exception e) {
        if (e.getMessage().contains("REFERENCE constraint") || e.getMessage().contains("conflicted")) {
            XDialog.alert("Không thể xóa! Phòng chiếu này đang được sử dụng trong suất chiếu.");
        } else {
            e.printStackTrace();
            XDialog.alert("Xóa thất bại: " + e.getMessage());
        }
    }
}


    @Override
    public void clear() {
        txtMaPhong.setText("");
        txtTenPhong.setText("");
        txtSoHang.setText("");
        txtSoCot.setText("");
        tblPhongChieu.clearSelection();
        updateButtonStatus();
    }

    @Override
    public void setEditable(boolean editable) {
        txtMaPhong.setEditable(editable);
        txtTenPhong.setEditable(editable);
        txtSoHang.setEditable(editable);
        txtSoCot.setEditable(editable);
    }

    @Override
    public void moveFirst() {
        if (items.isEmpty()) {
            return;
        }
        tblPhongChieu.setRowSelectionInterval(0, 0);
        setForm(items.get(0));
    }

    @Override
    public void movePrevious() {
        int row = tblPhongChieu.getSelectedRow();
        if (row > 0) {
            row--;
            tblPhongChieu.setRowSelectionInterval(row, row);
            setForm(items.get(row));
        }
    }

    @Override
    public void moveNext() {
        int row = tblPhongChieu.getSelectedRow();
        if (row < items.size() - 1) {
            row++;
            tblPhongChieu.setRowSelectionInterval(row, row);
            setForm(items.get(row));
        }
    }

    @Override
    public void moveLast() {
        int row = items.size() - 1;
        tblPhongChieu.setRowSelectionInterval(row, row);
        setForm(items.get(row));
    }

    @Override
    public void moveTo(int rowIndex) {
        if (rowIndex >= 0 && rowIndex < items.size()) {
            tblPhongChieu.setRowSelectionInterval(rowIndex, rowIndex);
            setForm(items.get(rowIndex));
        }
    }

    @Override
    public void edit() {
        int row = tblPhongChieu.getSelectedRow();
        if (row >= 0) {
            setForm(items.get(row));
        }
    }

    @Override
    public void selectTimeRange() {
        throw new UnsupportedOperationException("Chức năng lọc theo thời gian không áp dụng cho Phòng Chiếu.");
    }

    @Override
    public void open() {
        fillToTable();
        clear();
        updateButtonStatus();
    }

}
