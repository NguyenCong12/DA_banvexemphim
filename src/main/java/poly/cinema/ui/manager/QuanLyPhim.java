/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package poly.cinema.ui.manager;

import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import poly.cinema.dao.QuanLyPhimDao;
import poly.cinema.dao.impl.LoaiPhimDaoImpl;
import poly.cinema.dao.impl.QuanLyPhimDaoImpl;
import poly.cinema.entity.LoaiPhim;
import poly.cinema.entity.Phim;
import poly.cinema.util.XDate;
import poly.cinema.util.XDialog;
import poly.cinema.util.XIcon;

/**
 *
 * @author NITRO
 */
public class QuanLyPhim extends javax.swing.JPanel implements QuanLyPhimController {

    /**
     * Creates new form QuanLyPhim
     */
    public QuanLyPhim() {
        initComponents();
        open();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgTrangThai = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPhim = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtTenPhim = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtThoiLuong = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtMoTa = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        rdoDangChieu = new javax.swing.JRadioButton();
        rdoNgungChieu = new javax.swing.JRadioButton();
        lblAnh = new javax.swing.JLabel();
        cboLoaiPhim = new javax.swing.JComboBox<>();
        txtNgayKhoiChieu = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnThemm = new javax.swing.JButton();
        btnSuaa = new javax.swing.JButton();
        btnXoaa = new javax.swing.JButton();
        btnlamMoi = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1110, 720));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(1110, 720));

        jScrollPane1.setBackground(new java.awt.Color(248, 248, 248));

        tblPhim.setAutoCreateRowSorter(true);
        tblPhim.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã phim", "Tên phim", "Thể loại", "Thời lượng", "Mô tả", "Ngày khởi chiếu", "Trạng thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPhim.setGridColor(new java.awt.Color(0, 0, 0));
        tblPhim.setRowHeight(25);
        tblPhim.setShowGrid(true);
        tblPhim.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPhimMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPhim);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setMaximumSize(new java.awt.Dimension(1110, 720));
        jPanel1.setPreferredSize(new java.awt.Dimension(1110, 720));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Tên phim: ");

        txtTenPhim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenPhimActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Thời lượng");

        txtThoiLuong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtThoiLuongActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Mô tả:");

        txtMoTa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMoTaActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Ngày khởi chiếu:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Trạng thái: ");

        btgTrangThai.add(rdoDangChieu);
        rdoDangChieu.setText("Đang chiếu");

        btgTrangThai.add(rdoNgungChieu);
        rdoNgungChieu.setText("Ngưng chiếu");

        lblAnh.setText("jLabel8");
        lblAnh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAnhMouseClicked(evt);
            }
        });

        cboLoaiPhim.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtNgayKhoiChieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNgayKhoiChieuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMoTa, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                        .addComponent(txtTenPhim))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNgayKhoiChieu, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(107, 107, 107)
                .addComponent(lblAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(183, 183, 183)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboLoaiPhim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rdoDangChieu)
                        .addGap(86, 86, 86)
                        .addComponent(rdoNgungChieu))
                    .addComponent(txtThoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTenPhim, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboLoaiPhim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtThoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdoDangChieu)
                            .addComponent(rdoNgungChieu))
                        .addGap(180, 180, 180))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txtMoTa, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtNgayKhoiChieu, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lblAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jLabel7.setText("QUẢN LÝ PHIM");

        btnThemm.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnThemm.setText("Thêm");
        btnThemm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnThemmMouseClicked(evt);
            }
        });
        btnThemm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemmActionPerformed(evt);
            }
        });

        btnSuaa.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSuaa.setText("Sửa");
        btnSuaa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaaActionPerformed(evt);
            }
        });

        btnXoaa.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnXoaa.setText("xóa");
        btnXoaa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaaActionPerformed(evt);
            }
        });

        btnlamMoi.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnlamMoi.setText("Làm mới");
        btnlamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlamMoiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(450, 450, 450))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1039, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1039, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnThemm)
                        .addGap(45, 45, 45)
                        .addComponent(btnSuaa)
                        .addGap(40, 40, 40)
                        .addComponent(btnXoaa, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(btnlamMoi)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel7)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThemm, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuaa, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoaa, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnlamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, 730));
    }// </editor-fold>//GEN-END:initComponents

    private void txtTenPhimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenPhimActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenPhimActionPerformed

    private void txtThoiLuongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtThoiLuongActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtThoiLuongActionPerformed

    private void txtMoTaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMoTaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMoTaActionPerformed

    private void txtNgayKhoiChieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNgayKhoiChieuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNgayKhoiChieuActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed

    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void tblPhimMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPhimMouseClicked
        int row = tblPhim.getSelectedRow();
        if (row >= 0) {
            Phim phim = items.get(row);
            setForm(phim);
            updateButtonStatus();
        }
    }//GEN-LAST:event_tblPhimMouseClicked

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //create();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

    }//GEN-LAST:event_jButton6ActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        //delete();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void lblAnhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAnhMouseClicked
        chooseFile();
    }//GEN-LAST:event_lblAnhMouseClicked

    private void btnlamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlamMoiActionPerformed
        clear();
    }//GEN-LAST:event_btnlamMoiActionPerformed

    private void btnXoaaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaaActionPerformed
        delete();
    }//GEN-LAST:event_btnXoaaActionPerformed

    private void btnThemmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemmActionPerformed
        create();
    }//GEN-LAST:event_btnThemmActionPerformed

    private void btnSuaaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaaActionPerformed
        update();
    }//GEN-LAST:event_btnSuaaActionPerformed

    private void btnThemmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnThemmMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnThemmMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgTrangThai;
    private javax.swing.JButton btnSuaa;
    private javax.swing.JButton btnThemm;
    private javax.swing.JButton btnXoaa;
    private javax.swing.JButton btnlamMoi;
    private javax.swing.JComboBox<String> cboLoaiPhim;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAnh;
    private javax.swing.JRadioButton rdoDangChieu;
    private javax.swing.JRadioButton rdoNgungChieu;
    private javax.swing.JTable tblPhim;
    private javax.swing.JTextField txtMoTa;
    private javax.swing.JTextField txtNgayKhoiChieu;
    private javax.swing.JTextField txtTenPhim;
    private javax.swing.JTextField txtThoiLuong;
    // End of variables declaration//GEN-END:variables

    QuanLyPhimDao dao = new QuanLyPhimDaoImpl();
    List<Phim> items = new ArrayList<>();
    private List<LoaiPhim> loaiPhimList;

    private void loadLoaiPhimToComboBox() {
        loaiPhimList = new LoaiPhimDaoImpl().findAll();
        cboLoaiPhim.removeAllItems();
        for (LoaiPhim loai : loaiPhimList) {
            cboLoaiPhim.addItem(loai.getTenLoai()); // ✅ String
        }
    }

    @Override
    public void open() {
        loadLoaiPhimToComboBox();
        fillToTable();
        clear();
        
        if (cboLoaiPhim.getItemCount() > 0) {
            cboLoaiPhim.setSelectedIndex(0); // Mặc định set thể loại đầu tiên khi mở form
        }
        
        updateButtonStatus();
    }

    private void updateButtonStatus() {
        boolean isRowSelected = tblPhim.getSelectedRow() >= 0;

        btnThemm.setEnabled(!isRowSelected);    // Nếu chưa chọn thì cho phép thêm
        btnSuaa.setEnabled(isRowSelected);      // Nếu đã chọn thì mới sửa
        btnXoaa.setEnabled(isRowSelected);      // Nếu đã chọn thì mới xóa
        btnlamMoi.setEnabled(true);            // Luôn bật nút làm mới
    }

    private String getTrangThai() {
        if (rdoDangChieu.isSelected()) {
            return "Đang chiếu";
        }
        if (rdoNgungChieu.isSelected()) {
            return "Ngừng chiếu";
        }
        return null; // ❌ Nếu không chọn gì => null => lỗi CHECK constraint
    }

    @Override
    public Phim getForm() {
        String tenPhim = txtTenPhim.getText().trim();
        String thoiLuongStr = txtThoiLuong.getText().trim();
        String moTa = txtMoTa.getText().trim();

        // Validate tên phim
        if (tenPhim.isEmpty()) {
            XDialog.alert("Tên phim không được để trống!");
            return null;
        }

        // Lấy mã loại phim từ combo box
        LoaiPhim selectedLoai = (LoaiPhim) cboLoaiPhim.getSelectedItem();
        if (selectedLoai == null) {
            XDialog.alert("Vui lòng chọn thể loại phim!");
            return null;
        }

        // Parse thời lượng
        int thoiLuong;
        try {
            thoiLuong = Integer.parseInt(thoiLuongStr);
            if (thoiLuong <= 0) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            XDialog.alert("Thời lượng phải là số nguyên dương!");
            return null;
        }

        // Kiểm tra ngày chiếu và ngày kết thúc
        Date ngayKhoiChieu = XDate.parse(txtNgayKhoiChieu.getText().trim(), "dd/MM/yyyy");
        Date today = new Date();
        if (ngayKhoiChieu.before(today)) {
            XDialog.alert("Ngày khởi chiếu không được nhỏ hơn ngày hôm nay.");
            return null;
        }
        // Lấy trạng thái
        String trangThai = getTrangThai();
        if (trangThai == null) {
            XDialog.alert("Vui lòng chọn trạng thái phim!");
            return null;
        }

        // Hình ảnh
        String hinhAnh = lblAnh.getToolTipText();

        // Build đối tượng Phim
        return Phim.builder()
                .tenPhim(tenPhim)
                .maLoai(selectedLoai.getMaLoai())
                .thoiLuong(thoiLuong)
                .moTa(moTa)
                .ngayKhoiChieu(ngayKhoiChieu)
                .trangThai(trangThai)
                .hinhAnh(hinhAnh)
                .build();
    }

    @Override
    public void setForm(Phim entity) {
        txtTenPhim.setText(entity.getTenPhim());
        for (LoaiPhim loai : loaiPhimList) {
            if (loai.getMaLoai() == entity.getMaLoai()) {
                cboLoaiPhim.setSelectedItem(loai.getTenLoai());
                break;
            }
        }

        txtThoiLuong.setText(String.valueOf(entity.getThoiLuong()));
        txtMoTa.setText(entity.getMoTa());
        txtNgayKhoiChieu.setText(XDate.format(entity.getNgayKhoiChieu(), "dd/MM/yyyy"));
        switch (entity.getTrangThai()) {
            case "Đang chiếu" ->
                rdoDangChieu.setSelected(true);
            case "Ngừng chiếu" ->
                rdoNgungChieu.setSelected(true);
        }

        // Hiển thị hình ảnh nếu tồn tại
        String hinh = entity.getHinhAnh();
        if (hinh != null) {
            File imageFile = new File("images", hinh);
            if (imageFile.exists()) {
                lblAnh.setToolTipText(hinh); // dùng để lưu lại tên file
                XIcon.setIcon(lblAnh, imageFile); // hiển thị icon
            } else {
                lblAnh.setToolTipText(null);
                lblAnh.setIcon(null);
            }
        } else {
            lblAnh.setToolTipText(null);
            lblAnh.setIcon(null);
        }
    }

    private String getTenLoaiByMaLoai(int maLoai) {
        for (LoaiPhim loai : loaiPhimList) {
            if (loai.getMaLoai() == maLoai) {
                return loai.getTenLoai();
            }
        }
        return "Không xác định";
    }

    @Override
    public void fillToTable() {
        DefaultTableModel model = (DefaultTableModel) tblPhim.getModel();
        model.setRowCount(0);
        items = dao.findAll();

        for (Phim p : items) {
            String tenLoai = getTenLoaiByMaLoai(p.getMaLoai()); // ✅ tên thể loại
            model.addRow(new Object[]{
                p.getMaPhim(), p.getTenPhim(), tenLoai, // ✅ đúng tên
                p.getThoiLuong(), p.getMoTa(),
                XDate.format(p.getNgayKhoiChieu(), "dd/MM/yyyy"),
                p.getTrangThai(), p.getHinhAnh()
            });
        }
    }

    @Override
    public void create() {
        Phim phim = getForm();
        if (phim == null) {
            return; // đã bắt lỗi trong getForm()
        }

        // Kiểm tra tên trùng
        for (Phim p : dao.findAll()) {
            if (p.getTenPhim().equalsIgnoreCase(phim.getTenPhim())) {
                XDialog.alert("Tên phim đã tồn tại!");
                return;
            }
        }

        // Kiểm tra ảnh
        if (phim.getHinhAnh() == null || phim.getHinhAnh().trim().isEmpty()) {
            XDialog.alert("Vui lòng chọn ảnh cho phim!");
            return;
        }

        // Xác nhận thêm
        if (XDialog.confirm("Bạn có chắc chắn muốn thêm phim này?")) {
            dao.create(phim);
            fillToTable();
            clear();
            XDialog.alert(" Thêm mới thành công!");
            updateButtonStatus();
        }
    }

    @Override
    public void update() {
        int row = tblPhim.getSelectedRow();
        if (row < 0) {
            XDialog.alert("Vui lòng chọn phim để cập nhật.");
            return;
        }

        Phim phimMoi = getForm();
        if (phimMoi == null) {
            return; // đã validate trong getForm()
        }

        int maPhim = (Integer) tblPhim.getValueAt(row, 0);
        phimMoi.setMaPhim(maPhim);

        // Lấy phim cũ
        Phim phimCu = dao.findById(maPhim);
        if (phimCu == null) {
            XDialog.alert("Phim không tồn tại!");
            return;
        }

        // Kiểm tra tên trùng với phim khác
        for (Phim p : dao.findAll()) {
            if (p.getTenPhim().equalsIgnoreCase(phimMoi.getTenPhim())
                    && p.getMaPhim() != maPhim) {
                XDialog.alert("Tên phim đã tồn tại ở phim khác!");
                return;
            }
        }

        // Kiểm tra chưa thay đổi gì
        if (phimMoi.getTenPhim().equals(phimCu.getTenPhim())
                && phimMoi.getMaLoai() == phimCu.getMaLoai()
                && phimMoi.getThoiLuong() == phimCu.getThoiLuong()
                && phimMoi.getMoTa().equals(phimCu.getMoTa())
                && phimMoi.getNgayKhoiChieu().equals(phimCu.getNgayKhoiChieu())
                && phimMoi.getTrangThai().equals(phimCu.getTrangThai())
                && ((phimMoi.getHinhAnh() == null && phimCu.getHinhAnh() == null)
                || (phimMoi.getHinhAnh() != null && phimMoi.getHinhAnh().equals(phimCu.getHinhAnh())))) {
            XDialog.alert("Bạn chưa thay đổi thông tin nào để cập nhật!");
            return;
        }

        // Xác nhận cập nhật
        if (XDialog.confirm("Bạn chắc chắn muốn cập nhật thông tin phim này?")) {
            dao.update(phimMoi);
            fillToTable();
            XDialog.alert(" Cập nhật thành công!");
            updateButtonStatus();
        }
    }

    @Override
    public void delete() {
        int row = tblPhim.getSelectedRow();
        if (row < 0) {
            XDialog.alert("Vui lòng chọn phim để xóa.");
            return;
        }

        int maPhim = (Integer) tblPhim.getValueAt(row, 0);
        Phim phim = dao.findById(maPhim);

        if (phim == null) {
            XDialog.alert("Phim không tồn tại hoặc đã bị xóa trước đó!");
            fillToTable();
            return;
        }

        // Không cho xóa phim đang chiếu
        if ("Đang chiếu".equalsIgnoreCase(phim.getTrangThai())) {
            XDialog.alert(" Không thể xóa phim đang chiếu!");
            return;
        }

        // Xác nhận xóa
        if (XDialog.confirm("Bạn chắc chắn muốn xóa phim này?")) {
            dao.deleteById(maPhim);
            fillToTable();
            clear();
            XDialog.alert("Xóa thành công!");
            updateButtonStatus();
        }
    }

    @Override
    public void clear() {
        txtTenPhim.setText("");
        cboLoaiPhim.setSelectedIndex(-1); // reset selection

        txtThoiLuong.setText("");
        txtMoTa.setText("");
        txtNgayKhoiChieu.setText("");
        rdoDangChieu.setSelected(true);
        lblAnh.setIcon(null);
        lblAnh.setToolTipText(null);
        tblPhim.clearSelection();
        updateButtonStatus();
    }

    @Override
    public void setEditable(boolean editable) {
        txtTenPhim.setEditable(editable);
        txtThoiLuong.setEditable(editable);
        txtMoTa.setEditable(editable);
        txtNgayKhoiChieu.setEditable(editable);
        rdoDangChieu.setEnabled(editable);
        rdoNgungChieu.setEnabled(editable);
        // Nếu có nút hoặc hình ảnh thì xử lý thêm ở đây
    }

    @Override
    public void moveFirst() {
        if (items.isEmpty()) {
            return;
        }
        tblPhim.setRowSelectionInterval(0, 0);
        setForm(items.get(0));
    }

    @Override
    public void movePrevious() {
        int row = tblPhim.getSelectedRow();
        if (row > 0) {
            row--;
            tblPhim.setRowSelectionInterval(row, row);
            setForm(items.get(row));
        }
    }

    @Override
    public void moveNext() {
        int row = tblPhim.getSelectedRow();
        if (row < items.size() - 1) {
            row++;
            tblPhim.setRowSelectionInterval(row, row);
            setForm(items.get(row));
        }
    }

    @Override
    public void moveLast() {
        int row = items.size() - 1;
        tblPhim.setRowSelectionInterval(row, row);
        setForm(items.get(row));
    }

    @Override
    public void moveTo(int rowIndex) {
        if (rowIndex >= 0 && rowIndex < items.size()) {
            tblPhim.setRowSelectionInterval(rowIndex, rowIndex);
            setForm(items.get(rowIndex));
        }
    }

    @Override
    public void selectTimeRange() {
//        Date tuNgay = txtTuNgay.getDate();
//        Date denNgay = txtDenNgay.getDate();
//
//        if (tuNgay == null || denNgay == null) {
//            XDialog.alert("Vui lòng chọn đầy đủ khoảng ngày.");
//            return;
//        }
//
//        DefaultTableModel model = (DefaultTableModel) tblPhim.getModel();
//        model.setRowCount(0);
//        for (Phim p : dao.findAll()) {
//            Date ngayKhoiChieu = p.getNgayKhoiChieu();
//            if (!ngayKhoiChieu.before(tuNgay) && !ngayKhoiChieu.after(denNgay)) {
//                model.addRow(new Object[]{
//                    p.getMaPhim(), p.getTenPhim(), p.getTheLoai(), p.getThoiLuong(),
//                    p.getMoTa(), XDate.format(p.getNgayKhoiChieu(), "dd/MM/yyyy"),
//                    p.getTrangThai(), p.getHinhAnh()
//                });
//            }
//        }
    }

    @Override
    public void edit() {
        int row = tblPhim.getSelectedRow();
        if (row < 0) {
            XDialog.alert("Vui lòng chọn phim để sửa.");
            return;
        }
        setForm(items.get(row));
        tblPhim.setRowSelectionInterval(row, row);
    }

    private final JFileChooser fileChooser = new JFileChooser();

    public void chooseFile() {
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image files", "jpg", "png", "jpeg", "gif"));
        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            File file = XIcon.copyTo(selectedFile, "images"); // đảm bảo sao chép đúng thư mục
            if (file != null) {
                lblAnh.setToolTipText(file.getName()); // lưu tên ảnh
                XIcon.setIcon(lblAnh, file);           // hiển thị ảnh
            }
        }
    }

}
