/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package poly.cinema.ui.manager;

import java.util.Comparator;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import poly.cinema.dao.LoaiPhimDao;
import poly.cinema.dao.impl.LoaiPhimDaoImpl;
import poly.cinema.entity.LoaiPhim;

/**
 *
 * @author BA HAO
 */
public class LoaiPhimPanel extends javax.swing.JPanel implements CrudController<LoaiPhim> {

    private final LoaiPhimDao loaiPhimDao = new LoaiPhimDaoImpl();

    public LoaiPhimPanel() {
        initComponents();
        open();
        tblLoaiPhim.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                edit();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnThem = new javax.swing.JButton();
        txtTheLoai = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLoaiPhim = new javax.swing.JTable();
        btnXoa = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnNhapMoi = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1110, 720));
        setVerifyInputWhenFocusTarget(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1110, 720));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel5.setText("LOẠI PHIM");

        btnThem.setText("THÊM");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        txtTheLoai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTheLoaiActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Thể loại");

        tblLoaiPhim.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã loại", "Thể loại"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLoaiPhim.setRowHeight(25);
        tblLoaiPhim.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLoaiPhimMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblLoaiPhim);

        btnXoa.setText("XÓA");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnSua.setText("SỬA");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnNhapMoi.setText("NHẬP MỚI");
        btnNhapMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNhapMoiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(406, 406, 406)
                                .addComponent(jLabel5))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1080, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(15, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTheLoai, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(176, 176, 176)
                        .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(145, 145, 145)
                        .addComponent(btnNhapMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTheLoai, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(130, 130, 130)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNhapMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(154, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName("1110");
        getAccessibleContext().setAccessibleDescription("720");
    }// </editor-fold>//GEN-END:initComponents

    private void txtTheLoaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTheLoaiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTheLoaiActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        create();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        update();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        delete();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnNhapMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNhapMoiActionPerformed
        clear();
    }//GEN-LAST:event_btnNhapMoiActionPerformed

    private void tblLoaiPhimMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLoaiPhimMouseClicked
        // TODO add your handling code here:
        updateButtonStatus();
    }//GEN-LAST:event_tblLoaiPhimMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNhapMoi;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblLoaiPhim;
    private javax.swing.JTextField txtTheLoai;
    // End of variables declaration//GEN-END:variables
@Override
    public void open() {
        fillToTable();
        updateButtonStatus();
    }

    private void updateButtonStatus() {
        boolean isSelected = tblLoaiPhim.getSelectedRow() >= 0;
        btnThem.setEnabled(!isSelected);
        btnSua.setEnabled(isSelected);
        btnXoa.setEnabled(isSelected);
    }

    @Override
    public void setForm(LoaiPhim entity) {
        txtTheLoai.setText(entity.getTenLoai());
    }

    @Override
    public LoaiPhim getForm() {
        String tenLoai = txtTheLoai.getText().trim();

        if (tenLoai.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tên thể loại không được để trống!");
            return null;
        }

        Integer maLoai = null;

        return LoaiPhim.builder()
                .maLoai(maLoai)
                .tenLoai(tenLoai)
                .build();
    }

    @Override
    public void fillToTable() {

        DefaultTableModel model = (DefaultTableModel) tblLoaiPhim.getModel();
        model.setRowCount(0);

        // Lấy danh sách và sắp xếp theo mã loại tăng dần
        List<LoaiPhim> danhSach = loaiPhimDao.findAll();
        danhSach.sort(Comparator.comparing(LoaiPhim::getMaLoai)); // Sắp xếp tăng dần theo mã

        // Đổ dữ liệu vào bảng
        for (LoaiPhim loai : danhSach) {
            model.addRow(new Object[]{
                loai.getMaLoai(), loai.getTenLoai()
            });
        }
        updateButtonStatus();
    }

    @Override
    public void edit() {
        int row = tblLoaiPhim.getSelectedRow();
        if (row == -1) {
            return;
        }

        Integer maLoai = (Integer) tblLoaiPhim.getValueAt(row, 0);
        LoaiPhim loai = loaiPhimDao.findById(maLoai);
        if (loai != null) {
            setForm(loai);
        } else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy bản ghi này trong CSDL!");
        }
    }

    @Override
    public void create() {
        String tenLoai = txtTheLoai.getText().trim();

        // 🔒 Kiểm tra không để trống
        if (tenLoai.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tên thể loại không được để trống.");
            return;
        }

        // 🔒 Kiểm tra trùng tên (không phân biệt hoa thường)
        LoaiPhim existing = loaiPhimDao.findByName(tenLoai);
        if (existing != null) {
            JOptionPane.showMessageDialog(this, "Tên thể loại đã tồn tại.");
            return;
        }

        // ✅ Tạo đối tượng mới (giả sử ID tự tăng)
        LoaiPhim entity = new LoaiPhim(null, tenLoai);
        try {
            LoaiPhim created = loaiPhimDao.create(entity);
            if (created != null) {
                JOptionPane.showMessageDialog(this, "Thêm thành công!");
                fillToTable();
                updateButtonStatus();
                clear();
            } else {
                JOptionPane.showMessageDialog(this, "Thêm thất bại!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
public void update() {
    int row = tblLoaiPhim.getSelectedRow();
    if (row == -1) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một bản ghi để sửa.");
        return;
    }

    Integer maLoai = (Integer) tblLoaiPhim.getValueAt(row, 0);
    String tenLoai = txtTheLoai.getText().trim();

    // 🔒 Kiểm tra rỗng
    if (tenLoai.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Tên thể loại không được để trống.");
        return;
    }

    // 🔄 Lấy bản gốc từ CSDL
    LoaiPhim old = loaiPhimDao.findById(maLoai);
    if (old == null) {
        JOptionPane.showMessageDialog(this, "Không tìm thấy thể loại để cập nhật.");
        return;
    }

    // 🔍 Kiểm tra không có thay đổi
    if (old.getTenLoai().equalsIgnoreCase(tenLoai)) {
        JOptionPane.showMessageDialog(this, "Bạn chưa thay đổi thông tin nào để cập nhật.");
        return;
    }

    // 🔒 Kiểm tra trùng tên với loại khác
    LoaiPhim existed = loaiPhimDao.findByName(tenLoai);
    if (existed != null && !existed.getMaLoai().equals(maLoai)) {
        JOptionPane.showMessageDialog(this, "Tên thể loại đã tồn tại.");
        return;
    }

    // ✅ Cập nhật
    LoaiPhim entity = LoaiPhim.builder()
            .maLoai(maLoai)
            .tenLoai(tenLoai)
            .build();

    try {
        loaiPhimDao.update(entity);
        JOptionPane.showMessageDialog(this, "Cập nhật thành công!");
        fillToTable();
        clear();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật: " + e.getMessage());
        e.printStackTrace();
    }
}


    @Override
    public void delete() {
        int row = tblLoaiPhim.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một bản ghi để xoá.");
            return;
        }

        Integer maLoai = (Integer) tblLoaiPhim.getValueAt(row, 0);
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn chắc chắn muốn xóa?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            loaiPhimDao.deleteById(maLoai);
            JOptionPane.showMessageDialog(this, "Xóa thành công!");
            fillToTable();
            clear();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Xóa thất bại: ");
            e.printStackTrace();
        }
    }

    @Override
    public void clear() {
        txtTheLoai.setText("");
        tblLoaiPhim.clearSelection();
        updateButtonStatus();
    }

    @Override
    public void setEditable(boolean editable) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void moveFirst() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void movePrevious() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void moveNext() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void moveLast() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void moveTo(int rowIndex) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void selectTimeRange() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
