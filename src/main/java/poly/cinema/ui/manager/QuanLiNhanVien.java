/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package poly.cinema.ui.manager;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import poly.cinema.dao.NguoiDungDAO;
import poly.cinema.dao.impl.NguoiDungDAOImpl;
import poly.cinema.entity.NguoiDung;
import poly.cinema.util.XIcon;

/**
 *
 * @author BA HAO
 */
public class QuanLiNhanVien extends javax.swing.JPanel implements QuanLiNhanVienController {

    /**
     * Creates new form QuanLiNhanVien
     */
    public QuanLiNhanVien() {
        initComponents();
        this.open();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgVaitro = new javax.swing.ButtonGroup();
        btgTrangthai = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblQLnhanvien = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtTennhanvien = new javax.swing.JTextField();
        txtSodienthoai = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        rdoHoatDong = new javax.swing.JRadioButton();
        rdoDaNgung = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        lblAnh = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnNhapmoi = new javax.swing.JButton();
        txtMatkhau = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        rdoQuanLy = new javax.swing.JRadioButton();
        rdoNhanVien = new javax.swing.JRadioButton();

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setPreferredSize(new java.awt.Dimension(1110, 720));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblQLnhanvien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên nhân viên", "Email", "Số điện thoại", "Vai trò", "Trạng thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblQLnhanvien.setGridColor(new java.awt.Color(0, 0, 0));
        tblQLnhanvien.setRowHeight(25);
        tblQLnhanvien.setShowGrid(true);
        tblQLnhanvien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblQLnhanvienMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblQLnhanvien);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, 991, 197));

        jPanel1.setBackground(new java.awt.Color(212, 212, 212));
        jPanel1.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Tên nhân viên");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, -1, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setText("Trạng thái");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 80, -1, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setText("Mật khẩu");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 80, -1, -1));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel15.setText("Số điện thoại");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 10, -1, -1));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel16.setText("Email");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 150, -1, -1));

        txtTennhanvien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTennhanvienActionPerformed(evt);
            }
        });
        jPanel1.add(txtTennhanvien, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 230, -1));

        txtSodienthoai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSodienthoaiActionPerformed(evt);
            }
        });
        jPanel1.add(txtSodienthoai, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 40, 230, -1));

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });
        jPanel1.add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 180, 230, -1));

        btgTrangthai.add(rdoHoatDong);
        rdoHoatDong.setText("Hoạt động");
        jPanel1.add(rdoHoatDong, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 110, -1, -1));

        btgTrangthai.add(rdoDaNgung);
        rdoDaNgung.setText("Đã ngừng");
        jPanel1.add(rdoDaNgung, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 110, -1, -1));

        lblAnh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAnhMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAnh, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAnh, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 160, 160));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Ảnh nhân viên");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 140, -1));

        btnThem.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnThem.setText("Thêm ");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        jPanel1.add(btnThem, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 260, 85, 32));

        btnSua.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        jPanel1.add(btnSua, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 260, 85, 32));

        btnXoa.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        jPanel1.add(btnXoa, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 260, 83, 32));

        btnNhapmoi.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnNhapmoi.setText("Nhập mới");
        btnNhapmoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNhapmoiActionPerformed(evt);
            }
        });
        jPanel1.add(btnNhapmoi, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 260, -1, 32));
        jPanel1.add(txtMatkhau, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 110, 230, -1));

        jPanel3.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 351, 991, 308));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jLabel1.setText("QUẢN LÝ NHÂN VIÊN");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(419, 28, -1, -1));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel13.setText("Vai trò");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 220, -1, -1));

        btgVaitro.add(rdoQuanLy);
        rdoQuanLy.setText("Quản lí");
        jPanel3.add(rdoQuanLy, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 250, -1, -1));

        btgVaitro.add(rdoNhanVien);
        rdoNhanVien.setText("Nhân viên");
        jPanel3.add(rdoNhanVien, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 250, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 1122, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtTennhanvienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTennhanvienActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTennhanvienActionPerformed

    private void txtSodienthoaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSodienthoaiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSodienthoaiActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        this.create();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        this.update();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        this.delete();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnNhapmoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNhapmoiActionPerformed
        // TODO add your handling code here:
        this.clear();
    }//GEN-LAST:event_btnNhapmoiActionPerformed

    private void tblQLnhanvienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblQLnhanvienMouseClicked
        int row = tblQLnhanvien.getSelectedRow();
        if (row >= 0) {
            String email = tblQLnhanvien.getValueAt(row, 1).toString(); // Cột 2 là email
            NguoiDung nhanVien = dao.findByEmail(email); // Tìm theo email, không dùng ID nữa

            if (nhanVien != null) {
                setForm(nhanVien);
                setEditable(true);
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy nhân viên!");
            }
        }

    }//GEN-LAST:event_tblQLnhanvienMouseClicked

    private void lblAnhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAnhMouseClicked
        chooseFile();
    }//GEN-LAST:event_lblAnhMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgTrangthai;
    private javax.swing.ButtonGroup btgVaitro;
    private javax.swing.JButton btnNhapmoi;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAnh;
    private javax.swing.JRadioButton rdoDaNgung;
    private javax.swing.JRadioButton rdoHoatDong;
    private javax.swing.JRadioButton rdoNhanVien;
    private javax.swing.JRadioButton rdoQuanLy;
    private javax.swing.JTable tblQLnhanvien;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JPasswordField txtMatkhau;
    private javax.swing.JTextField txtSodienthoai;
    private javax.swing.JTextField txtTennhanvien;
    // End of variables declaration//GEN-END:variables

    NguoiDungDAO dao = new NguoiDungDAOImpl();
    List<NguoiDung> items = new ArrayList<>();

    @Override
    public void open() {
        this.setVisible(true);
        clear();
        fillToTable();

    }

    @Override
    public void setForm(NguoiDung entity) {
        txtTennhanvien.setText(entity.getTenNd());
        txtMatkhau.setText(entity.getMatKhau());
        txtSodienthoai.setText(entity.getSdt());

        String hinh = entity.getAnh_dai_dien(); // đổi tên field

        if (hinh != null && !hinh.isBlank()) {
            File imageFile = new File("images", hinh);
            if (imageFile.exists()) {
                lblAnh.setToolTipText(hinh);
                XIcon.setIcon(lblAnh, imageFile); // hiển thị hình ảnh
            } else {
                lblAnh.setToolTipText(null);
                lblAnh.setIcon(null);
            }
        } else {
            lblAnh.setToolTipText(null);
            lblAnh.setIcon(null);
        }
        txtEmail.setText(entity.getEmail());
        rdoHoatDong.setSelected(entity.isHoat_dong());
        rdoDaNgung.setSelected(!entity.isHoat_dong());

        rdoQuanLy.setSelected(entity.isVai_tro());
        rdoNhanVien.setSelected(!entity.isVai_tro());
    }

    @Override
    public NguoiDung getForm() {
        NguoiDung user = new NguoiDung();
        int row = tblQLnhanvien.getSelectedRow();
        if (row >= 0) {
            // Lấy lại ma_nd từ entity cũ
            String email = tblQLnhanvien.getValueAt(row, 1).toString();
            NguoiDung existing = dao.findByEmail(email);
            user.setMaNd(existing.getMaNd());
        }

        user.setTenNd(txtTennhanvien.getText());
        user.setEmail(txtEmail.getText());
        user.setMatKhau(txtMatkhau.getText());
        user.setSdt(txtSodienthoai.getText());
        user.setVai_tro(rdoQuanLy.isSelected());  // sửa ở đây
        user.setHoat_dong(rdoHoatDong.isSelected());

        String anh = lblAnh.getToolTipText();
        user.setAnh_dai_dien(anh == null ? "" : anh);

        return user;
    }

    private List<NguoiDung> listAll = new ArrayList<>();
    private List<NguoiDung> listDisplay = new ArrayList<>();

    @Override
    public void fillToTable() {
        listAll = dao.findAll(); // chứa tất cả
        listDisplay.clear();     // chỉ chứa nhân viên

        DefaultTableModel model = (DefaultTableModel) tblQLnhanvien.getModel();
        model.setRowCount(0);

        for (NguoiDung item : listAll) {
            if (item.isVai_tro()) {
                continue; // bỏ qua quản lý trong bảng
            }

            listDisplay.add(item); // thêm vào danh sách hiển thị

            model.addRow(new Object[]{
                item.getTenNd(),
                item.getEmail(),
                item.getSdt(),
                "Nhân viên",
                item.isHoat_dong() ? "Hoạt động" : "Tạm dừng",
                false
            });
        }

    }

    @Override
    public void edit() {
        int row = tblQLnhanvien.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để chỉnh sửa!");
            return;
        }
        String email = tblQLnhanvien.getValueAt(row, 1).toString();
        NguoiDung entity = dao.findByEmail(email);
        if (entity != null) {
            this.setForm(entity);
            this.setEditable(true);
        }
    }

    @Override
    public void create() {
        String tennhanvien = txtTennhanvien.getText().trim();
        String matkhau = txtMatkhau.getText().trim();
        String sodienthoai = txtSodienthoai.getText().trim();
        String taikhoan = txtEmail.getText().trim();
        String anh = lblAnh.getToolTipText();

        // Kiểm tra rỗng
        if (tennhanvien.isEmpty() || matkhau.isEmpty() || taikhoan.isEmpty() || sodienthoai.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!");
            return;
        }

        // Kiểm tra ảnh
        if (anh == null || anh.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn ảnh!");
            return;
        }

        // Kiểm tra độ dài tên
        if (tennhanvien.length() < 3) {
            JOptionPane.showMessageDialog(this, "Tên nhân viên phải có ít nhất 3 ký tự!");
            return;
        }

        // Kiểm tra độ dài mật khẩu
        if (matkhau.length() < 6) {
            JOptionPane.showMessageDialog(this, "Mật khẩu phải có ít nhất 6 ký tự!");
            return;
        }

        // Kiểm tra định dạng email
        if (!taikhoan.matches("^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$")) {
            JOptionPane.showMessageDialog(this, "Định dạng email không hợp lệ!");
            return;
        }

        // Kiểm tra định dạng số điện thoại: phải bắt đầu bằng 0 và đủ 10 số
        if (!sodienthoai.matches("^0\\d{9}$")) {
            JOptionPane.showMessageDialog(this, "Số điện thoại không hợp lệ (phải bắt đầu bằng 0 và có 10 chữ số)!");
            return;
        }

        // Kiểm tra trạng thái
        if (!rdoHoatDong.isSelected() && !rdoDaNgung.isSelected()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn trạng thái!");
            return;
        }

        // Kiểm tra email đã tồn tại
        if (dao.findByEmail(taikhoan) != null) {
            JOptionPane.showMessageDialog(this, "Email đã tồn tại!");
            return;
        }

        // Kiểm tra số điện thoại đã tồn tại
        List<NguoiDung> list = dao.findAll();
        for (NguoiDung nd : list) {
            if (nd.getSdt().equals(sodienthoai)) {
                JOptionPane.showMessageDialog(this, "Số điện thoại đã được sử dụng!");
                return;
            }
        }

        // Thêm vào CSDL
        try {
            NguoiDung entity = getForm();
            entity.setVai_tro(false); // mặc định là nhân viên
            dao.create(entity);
            fillToTable();
            clear();
            JOptionPane.showMessageDialog(this, "Thêm mới thành công!");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Thêm mới thất bại!");
        }
    }

    @Override
    public void update() {
        int row = tblQLnhanvien.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để cập nhật!");
            return;
        }

        // Lấy dữ liệu từ form
        String tennhanvien = txtTennhanvien.getText().trim();
        String matkhau = txtMatkhau.getText().trim();
        String sodienthoai = txtSodienthoai.getText().trim();
        String taikhoan = txtEmail.getText().trim();
        String anh = lblAnh.getToolTipText();

        // Kiểm tra rỗng
        if (tennhanvien.isEmpty() || matkhau.isEmpty() || taikhoan.isEmpty() || sodienthoai.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!");
            return;
        }

        // Kiểm tra ảnh
        if (anh == null || anh.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn ảnh!");
            return;
        }

        // Kiểm tra tên
        if (tennhanvien.length() < 3) {
            JOptionPane.showMessageDialog(this, "Tên phải có ít nhất 3 ký tự!");
            return;
        }

        // Kiểm tra mật khẩu
        if (matkhau.length() < 6) {
            JOptionPane.showMessageDialog(this, "Mật khẩu phải có ít nhất 6 ký tự!");
            return;
        }

        // Kiểm tra định dạng email
        if (!taikhoan.matches("^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$")) {
            JOptionPane.showMessageDialog(this, "Email không hợp lệ!");
            return;
        }

        // Kiểm tra số điện thoại: bắt đầu bằng 0 và đủ 10 số
        if (!sodienthoai.matches("^0\\d{9}$")) {
            JOptionPane.showMessageDialog(this, "Số điện thoại không hợp lệ (phải bắt đầu bằng 0 và có 10 chữ số)!");
            return;
        }

        // Kiểm tra trạng thái
        if (!rdoHoatDong.isSelected() && !rdoDaNgung.isSelected()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn trạng thái!");
            return;
        }

        try {
            NguoiDung newUser = getForm();
            String oldEmail = tblQLnhanvien.getValueAt(row, 1).toString();
            NguoiDung oldUser = dao.findByEmail(oldEmail);

            // Kiểm tra trùng email (với người khác)
            NguoiDung checkEmail = dao.findByEmail(taikhoan);
            if (!taikhoan.equals(oldEmail) && checkEmail != null) {
                JOptionPane.showMessageDialog(this, "Email đã tồn tại, không thể cập nhật!");
                return;
            }

            // Kiểm tra trùng số điện thoại (với người khác)
            List<NguoiDung> allUsers = dao.findAll();
            for (NguoiDung nd : allUsers) {
                if (!nd.getEmail().equals(oldEmail) && nd.getSdt().equals(sodienthoai)) {
                    JOptionPane.showMessageDialog(this, "Số điện thoại đã tồn tại, không thể cập nhật!");
                    return;
                }
            }

            // So sánh dữ liệu cũ và mới
            if (oldUser != null && newUser.equals(oldUser)) {
                JOptionPane.showMessageDialog(this, "Không có thay đổi nào để cập nhật!");
                return;
            }

            dao.update(newUser);
            fillToTable();
            this.clear();
            JOptionPane.showMessageDialog(this, "Cập nhật thành công!");

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Cập nhật thất bại: " + e.getMessage());
        }
    }

    @Override
    public void delete() {
        int row = tblQLnhanvien.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để xóa!");
            return;
        }

        String email = tblQLnhanvien.getValueAt(row, 1).toString();

        int choice = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa người dùng này?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (choice != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            NguoiDung user = dao.findByEmail(email);
            if (user == null) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy người dùng để xóa!");
                return;
            }

            dao.deleteById(user.getMaNd());
            fillToTable();
            clear();
            JOptionPane.showMessageDialog(this, "Xóa thành công!");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Xóa thất bại: ");
        }
    }

    @Override
    public void clear() {
        this.setForm(new NguoiDung());
        setEditable(false);
        lblAnh.setIcon(null);
    }

    @Override
    public void setEditable(boolean editable) {
        btnThem.setEnabled(!editable);
        btnSua.setEnabled(editable);
        btnXoa.setEnabled(editable);
    }

    @Override
    public void moveFirst() {
        if (!items.isEmpty()) {
            tblQLnhanvien.setRowSelectionInterval(0, 0);
            edit();
        }
    }

    @Override
    public void movePrevious() {
        int row = tblQLnhanvien.getSelectedRow();
        if (row > 0) {
            tblQLnhanvien.setRowSelectionInterval(row - 1, row - 1);
            edit();
        }
    }

    @Override
    public void moveNext() {
        int row = tblQLnhanvien.getSelectedRow();
        if (row < tblQLnhanvien.getRowCount() - 1) {
            tblQLnhanvien.setRowSelectionInterval(row + 1, row + 1);
            edit();
        }
    }

    @Override
    public void moveLast() {
        int rowCount = tblQLnhanvien.getRowCount();
        if (rowCount > 0) {
            tblQLnhanvien.setRowSelectionInterval(rowCount - 1, rowCount - 1);
            edit();
        }
    }

    @Override
    public void moveTo(int rowIndex) {
        if (rowIndex >= 0 && rowIndex < tblQLnhanvien.getRowCount()) {
            tblQLnhanvien.setRowSelectionInterval(rowIndex, rowIndex);
            edit();
        }
    }

    @Override
    public void selectTimeRange() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private final JFileChooser fileChooser = new JFileChooser();

    public void chooseFile() {
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image files", "jpg", "png", "jpeg", "gif"));
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            File file = XIcon.copyTo(selectedFile, "images"); // copy về thư mục "images"
            if (file != null) {
                lblAnh.setToolTipText(file.getName()); // gắn tên ảnh vào tooltip
                XIcon.setIcon(lblAnh, file);           // hiển thị ảnh lên label
            }
        }
    }

}
