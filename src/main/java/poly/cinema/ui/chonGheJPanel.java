/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package poly.cinema.ui;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import poly.cinema.dao.ChiTietVeDAO;
import poly.cinema.dao.QuanLyGheDao;
import poly.cinema.dao.impl.ChiTietVeDAOImpl;
import poly.cinema.dao.impl.QuanLyGheDaoImpl;
import poly.cinema.entity.DatVeSession;
import poly.cinema.entity.QuanLyGhe;

/**
 *
 * @author Admin
 */
public class chonGheJPanel extends javax.swing.JPanel {

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        pnlGhe = new javax.swing.JPanel();
        btnTiepTheo = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout pnlGheLayout = new javax.swing.GroupLayout(pnlGhe);
        pnlGhe.setLayout(pnlGheLayout);
        pnlGheLayout.setHorizontalGroup(
            pnlGheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        pnlGheLayout.setVerticalGroup(
            pnlGheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        btnTiepTheo.setText("jButton1");
        btnTiepTheo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTiepTheoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(274, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(pnlGhe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(136, 136, 136))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(btnTiepTheo)
                        .addGap(117, 117, 117))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addComponent(pnlGhe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(btnTiepTheo)
                .addGap(32, 32, 32))
        );

        add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, 720));
    }// </editor-fold>//GEN-END:initComponents

    private void btnTiepTheoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTiepTheoActionPerformed
       // ✅ Ghi dữ liệu vào session trước
   DatVeSession.addGheDaChon(gheDaChon);

    
    // ✅ Nếu maXuatChieu đang lưu là String → phải parse
    DatVeSession.setMaXuat(Integer.parseInt(maXuatChieu)); // ép kiểu nếu cần

    if (banHangPanel == null) {
        banHangPanel = new BanHang(pnlMainContent);
        pnlMainContent.add(banHangPanel, "pnlBanHang");
    }

    // Gọi update
    banHangPanel.updateSauKhiChonGhe();

    // Chuyển panel
    chuyenPanel("pnlBanHang");
    }//GEN-LAST:event_btnTiepTheoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTiepTheo;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel pnlGhe;
    // End of variables declaration//GEN-END:variables

    private List<String> gheDaChon = new ArrayList<>();
    private JPanel pnlMainContent;
    private String maXuatChieu;
    private BanHang banHangPanel;

    public chonGheJPanel(JPanel pnlMainContent) {
        this.pnlMainContent = pnlMainContent;
        initComponents();

        // ✅ Xóa tất cả listener cũ trước khi gắn mới
        for (ActionListener al : btnTiepTheo.getActionListeners()) {
            btnTiepTheo.removeActionListener(al);
        }

        // ✅ Gắn listener một lần duy nhất
        btnTiepTheo.addActionListener(this::btnTiepTheoActionPerformed);
    }

    public void setMaXuatChieu(String maXuat) {
        this.maXuatChieu = maXuat;
    }

    public void loadGheTheoSuatChieu(String maXuat, String maPhong) {
        this.maXuatChieu = maXuat;

        QuanLyGheDao gheDao = new QuanLyGheDaoImpl();
        List<QuanLyGhe> danhSachGhe = gheDao.findByMaPhong(maPhong);

        ChiTietVeDAO chiTietVeDao = new ChiTietVeDAOImpl();
        List<String> gheDaDat = chiTietVeDao.getGheDaDat(maXuat);

        loadGhe(danhSachGhe, gheDaDat);
    }

    private void loadGhe(List<QuanLyGhe> danhSachGhe, List<String> gheDaDat) {
        pnlGhe.removeAll();
        gheDaChon.clear();

        if (danhSachGhe.isEmpty()) {
            return;
        }

        int soHang = danhSachGhe.stream().mapToInt(g -> g.getHang().charAt(0)).max().orElse(0) - 'A' + 1;
        int soCot = danhSachGhe.stream().mapToInt(QuanLyGhe::getCot).max().orElse(0);

        int panelWidth = pnlGhe.getWidth() > 0 ? pnlGhe.getWidth() : 700;
        int panelHeight = pnlGhe.getHeight() > 0 ? pnlGhe.getHeight() : 500;

        int gap = 6;
        int btnWidth = (panelWidth - (soCot - 1) * gap) / soCot;
        int btnHeight = (panelHeight - (soHang - 1) * gap) / soHang;
        int btnSize = Math.min(btnWidth, btnHeight);

        int totalWidth = soCot * btnSize + (soCot - 1) * gap;
        int totalHeight = soHang * btnSize + (soHang - 1) * gap;
        int offsetX = (panelWidth - totalWidth) / 2;
        int offsetY = (panelHeight - totalHeight) / 2;

        for (QuanLyGhe ghe : danhSachGhe) {
            int hangIndex = ghe.getHang().charAt(0) - 'A';
            int cotIndex = ghe.getCot() - 1;

            String maGhe = String.valueOf(ghe.getMaGhe()); // ✅ chuyển từ Integer → String

            String tenGhe = ghe.getSoGhe();

            JButton btn = new JButton(tenGhe);
            btn.setFont(new Font("Arial", Font.BOLD, 11));
            btn.setMargin(new Insets(0, 0, 0, 0));
            btn.setFocusable(false);

            int x = offsetX + cotIndex * (btnSize + gap);
            int y = offsetY + hangIndex * (btnSize + gap);
            btn.setBounds(x, y, btnSize, btnSize);

            if (gheDaDat.contains(maGhe)) {
                btn.setEnabled(false);
                btn.setBackground(Color.RED);
            } else {
                btn.setBackground("VIP".equalsIgnoreCase(ghe.getLoaiGhe()) ? Color.YELLOW : Color.LIGHT_GRAY);

                btn.addActionListener(e -> {
                    if (gheDaChon.contains(maGhe)) {
                        gheDaChon.remove(maGhe);
                        btn.setBackground("VIP".equalsIgnoreCase(ghe.getLoaiGhe()) ? Color.YELLOW : Color.LIGHT_GRAY);
                    } else {
                        gheDaChon.add(maGhe);
                        btn.setBackground(Color.ORANGE);
                    }
                });
            }

            pnlGhe.add(btn);
        }

        pnlGhe.revalidate();
        pnlGhe.repaint();
    }

    private void chuyenPanel(String name) {
        CardLayout cl = (CardLayout) pnlMainContent.getLayout();
        cl.show(pnlMainContent, name);
    }

    public List<Object[]> getDanhSachVeTam() {
        List<Object[]> ds = new ArrayList<>();
        for (String maGhe : gheDaChon) {
            double giaVe = 50000; // Ví dụ giá vé, có thể thay bằng lookup theo loại ghế
            ds.add(new Object[]{"Ghế " + maGhe, giaVe, 1, giaVe});
        }
        return ds;
    }

}
